package Kodlama.io.Devs.kodlamaIoDevs.business.concretes;

import java.util.List;
import java.util.stream.Collectors;

import org.springframework.stereotype.Service;

import Kodlama.io.Devs.kodlamaIoDevs.business.abstracts.TechnologyService;
import Kodlama.io.Devs.kodlamaIoDevs.business.requests.technology.CreateTechnologyRequest;
import Kodlama.io.Devs.kodlamaIoDevs.business.requests.technology.UpdateTechnologyRequest;
import Kodlama.io.Devs.kodlamaIoDevs.business.responses.technology.GetAllTechnologiesResponse;
import Kodlama.io.Devs.kodlamaIoDevs.business.responses.technology.GetByIdTechnologyResponse;
import Kodlama.io.Devs.kodlamaIoDevs.core.utilities.mappers.ModelMapperService;
import Kodlama.io.Devs.kodlamaIoDevs.dataAccess.abstracts.TechnologyRepository;
import Kodlama.io.Devs.kodlamaIoDevs.entities.concretes.Technology;
import lombok.AllArgsConstructor;

@Service
@AllArgsConstructor
public class TechnologyManager implements TechnologyService {
	
	private TechnologyRepository technologyRepository;
	private ModelMapperService modelMapperService;



	@Override
	public List<GetAllTechnologiesResponse> getAll() {
		
		List<Technology> technologies = this.technologyRepository.findAll();
//		List<GetAllTechnologiesResponse> technologyResponse = new ArrayList<GetAllTechnologiesResponse>();
//		
//		for (Technology technology : technologies) {
//			GetAllTechnologiesResponse responseItem = new GetAllTechnologiesResponse();
//			responseItem.setId(technology.getId());
//			responseItem.setName(technology.getName());
//			responseItem.setLanguageId(technology.getLanguage().getId());
//			responseItem.setLanguageName(technology.getLanguage().getName());
//			
//			technologyResponse.add(responseItem);
//		}
		
		List<GetAllTechnologiesResponse> response = technologies.stream()
				.map(technology -> this.modelMapperService.forResponse()
						.map(technology, GetAllTechnologiesResponse.class)).collect(Collectors.toList());
		
		return response;
	}

	@Override
	public GetByIdTechnologyResponse getById(int id) {
		Technology technology = this.technologyRepository.findById(id).orElseThrow();

		GetByIdTechnologyResponse technologyResponse = this.modelMapperService.forResponse().map(technology, GetByIdTechnologyResponse.class);
		
		 
		return technologyResponse;
		
	}


	@Override
	public void delete(int id) {
		this.technologyRepository.deleteById(id);
		
	}


	@Override
	public void add(CreateTechnologyRequest createTechnologyRequest) throws Exception {
		
		createTechnologyRequest.setLanguageId(createTechnologyRequest.getLanguageId());
		createTechnologyRequest.setName(createTechnologyRequest.getName());
		Technology technology = this.modelMapperService.forRequest().map(createTechnologyRequest, Technology.class);		
		
		this.technologyRepository.save(technology);
		
		
	}

	@Override
	public void update(UpdateTechnologyRequest updateTechnologyRequest) {
		Technology technology = this.modelMapperService.forRequest().map(updateTechnologyRequest, Technology.class);

//		updatedTechnology.setLanguage(languageService.getLanguageById(technology.getLanguageId()));
		
		this.technologyRepository.save(technology);
		
	}

}
