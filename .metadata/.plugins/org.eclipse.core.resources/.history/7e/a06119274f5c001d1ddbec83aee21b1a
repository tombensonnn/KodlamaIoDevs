package Kodlama.io.Devs.kodlamaIoDevs.business.concretes;

import java.util.ArrayList;
import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import Kodlama.io.Devs.kodlamaIoDevs.business.abstracts.LanguageService;
import Kodlama.io.Devs.kodlamaIoDevs.business.requests.language.CreateLanguageRequest;
import Kodlama.io.Devs.kodlamaIoDevs.business.requests.language.UpdateLanguageRequest;
import Kodlama.io.Devs.kodlamaIoDevs.business.responses.language.GetAllLanguagesResponse;
import Kodlama.io.Devs.kodlamaIoDevs.business.responses.language.GetByIdLanguageResponse;
import Kodlama.io.Devs.kodlamaIoDevs.dataAccess.abstracts.LanguageRepository;
import Kodlama.io.Devs.kodlamaIoDevs.entities.concretes.Language;

@Service
public class LanguageManager implements LanguageService {
	
	LanguageRepository languageRepository;
	
	@Autowired
	public LanguageManager(LanguageRepository languageRepository) {
		this.languageRepository = languageRepository;
	}

	@Override
	public List<GetAllLanguagesResponse> getAll() {
		List<Language> languages = languageRepository.findAll();
		List<GetAllLanguagesResponse> languageResponse = new ArrayList<GetAllLanguagesResponse>();
		
		for (Language language : languages) {
			GetAllLanguagesResponse responseItem = new GetAllLanguagesResponse();
			responseItem.setId(language.getId());
			responseItem.setName(language.getName());
			responseItem.setTechnologies(language.getTechnologies());
			
			languageResponse.add(responseItem);
		}
		
		return languageResponse;
	}

	@Override
	public GetByIdLanguageResponse getById(int id) {
		GetByIdLanguageResponse response = new GetByIdLanguageResponse();
		Language language = languageRepository.getReferenceById(id);
		
		response.setId(language.getId());
		response.setName(language.getName());
		response.setTechnologies(language.getTechnologies());
		
		return response;
	}

	@Override
	public void add(CreateLanguageRequest languageRequest) throws Exception {
		Language language = new Language();
		language.setName(languageRequest.getName());
		language.setTechnologies(languageRequest.getTechnologies());
		
		this.languageRepository.save(language);
		
	}

	@Override
	public void update(int id, UpdateLanguageRequest updateRequest) {
		Language updatedLanguage = languageRepository.getById(id);
		updatedLanguage.setName(updateRequest.getName());
		updatedLanguage.setTechnologies(updateRequest.getTechnologies());
		
		this.languageRepository.save(updatedLanguage);
		
		
	}

	@Override
	public void delete(int id) {
		languageRepository.delete(id);
		
	}

}
